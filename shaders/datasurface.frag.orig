#version 120

uniform mat4 u_modelViewMatrix;

varying vec3 direction;
varying vec3 position;
varying vec3 v_texCoord;
varying vec3 light;
varying vec3 halfVector;

// USER_PARAMETERS

float depth    = b_width * b_height;

const float hw = 2.0;

const vec3 min = vec3(-hw, -hw, -hw);
const vec3 max = vec3( hw,  hw,  hw);

uniform sampler2D sampler;

uniform float t;

float function(float x, float y, float z) {
	// Eventually you should do linear interpolation.
	// Do this first with the low z, then the high z
	float zint = floor((z / 4.0 + 0.5) * depth);
	
	float alpha = (z / 4.0 + 0.5) * depth - zint;
	
	float row = floor(zint / b_width);
	float col = floor(mod(zint, b_width));
	
	float xcoord = ((x / 4.0 + 0.5) + col) / b_width;
	float ycoord = ((y / 4.0 + 0.5) + row) / b_height;

	float lo = texture2D(sampler, vec2(xcoord, ycoord)).r;
	
	//return lo;
	
	zint += 1.0;
	
	if (zint != depth) {
		row = floor(zint / b_width);
		col = floor(mod(zint, b_width));
	
		xcoord = ((x / 4.0 + 0.5) + col) / b_width;
		ycoord = ((y / 4.0 + 0.5) + row) / b_height;
	
<<<<<<< HEAD
		float hi = texture2D(sampler, vec2(xcoord, ycoord)).r;
	
		return alpha * hi + (1.0 - alpha) * lo;
	} else {
		return lo;
	}
=======
	return alpha * hi + (1.0 - alpha) * lo - isovalue;
>>>>>>> ec5fd4b8a64088bd50f48536f392d389024b74ce
}

vec3 f_normal(float x, float y, float z, float h) {
	float dx = (function(x + h, y, z) - function(x - h, y, z));
	float dy = (function(x, y + h, z) - function(x, y - h, z));
	float dz = (function(x, y, z + h) - function(x, y, z - h));
	return normalize((0.5 / h) * vec3(dx, dy, dz));
}

void main () {
	vec3 start = v_texCoord;
	
	vec3 point;
	gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);

	float s   = 0.0;
	float ds  = 0.02;

	float h = 4.0 / min(depth, min(height, width));

	float s_previous;
	float v_previous;
	float value;
	
	vec3 temp1;
	vec3 temp2;
	
	point = start + direction * s;
	v_previous = function(point.x, point.y, point.z);

	for (s = ds; s < 6.93; s += ds) {
		// Determine the point you're sampling, and sample it
		point = start + direction * s;
		value = function(point.x, point.y, point.z);
		
		// If it's less than 0, then draw something
		if ((value * v_previous) < 0.0) {
			// Linearly interpolate where the value is 0
			s = (s_previous * value - s * v_previous) / (value - v_previous);
			point = start + direction * s;
			
			vec3 normal = f_normal(point.x, point.y, point.z, h);
			
			// Take the dot product, and gray-scale accordingly

			float dot = abs(dot(normal, direction));
			gl_FragColor = vec4(dot, dot, dot, 1.0);
			//gl_FragColor = vec4(point.x, point.y, point.z, 1.0);
			break;
		} else {
			// If it's not less than 0, then save the current value and
			// step as the previous one.  This is used for lin. interp.
			s_previous = s;
			v_previous = value;
			
			// Check to see if you're still inside the box.  If not, then bail.
			temp1 = sign(point - min);
			temp2 = sign(max - point);
			if (dot(temp1, temp2) < 3.0) {
				break;
			}
		}
	}
	
	/*
	vec4 texture = texture2D(sampler, v_texCoord.st);

	// Scaling The Input Vector To Length 1
	vec3 norm_normal = normalize(normal);
	vec3 norm_light = normalize(light);
	
	//gl_ModelViewMatrix * position;

	// Calculating The Diffuse Term And Clamping It To [0;1]
	float DiffuseTerm = clamp(dot(norm_normal, norm_light), 0.0, 1.0);

	// Calculating The Final Color
	gl_FragColor = 0.4 * texture + 0.6 * texture * DiffuseTerm;
	gl_FragColor.a = 1.0;

	//gl_FragColor = vec4(norm_normal.r, norm_normal.g, norm_normal.b, 1.0);
	*/
}